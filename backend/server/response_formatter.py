"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±—Ä–∞—É–∑–µ—Ä-–∞–≥–µ–Ω—Ç–∞.
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ JSON –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.
"""

import json
import re
from typing import Dict, Any, List, Union


def format_results(result: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –±—Ä–∞—É–∑–µ—Ä-–∞–≥–µ–Ω—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    
    Args:
        result: –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±—Ä–∞—É–∑–µ—Ä-–∞–≥–µ–Ω—Ç–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏ –¥–µ–π—Å—Ç–≤–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
        if any(emoji in result for emoji in ['üîó', 'üñ±Ô∏è', 'üîç', 'üìÑ', '‚å®Ô∏è']):
            return format_browser_actions(result)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ JSON
        json_match = re.search(r'\{[\s\S]*\}', result)
        if json_match:
            try:
                json_data = json.loads(json_match.group(0))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                if 'relevant_articles' in json_data:
                    return format_articles(json_data)
                
                if 'startups' in json_data:
                    return format_startups(json_data['startups'])
                
                if 'articles' in json_data:
                    return format_articles_list(json_data['articles'])
                
                # –û–±—â–∏–π —Å–ª—É—á–∞–π - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª—é–±—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
                return format_generic_object(json_data)
            except json.JSONDecodeError:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç, –æ—á–∏—â–∞–µ–º –æ—Ç Markdown –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        return clean_markdown(result)
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç Markdown
        return clean_markdown(result)


def format_browser_actions(result: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    
    Args:
        result: –°—Ç—Ä–æ–∫–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        
    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = result.split('\n')
    formatted_text = ''
    data_section = ''
    is_in_data_section = False
    collected_json = ''
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for line in lines:
        line = line.strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not line:
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if 'Extracted from page' in line or 'üìÑ' in line:
            is_in_data_section = True
            data_section = '–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
            continue
        
        # –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º JSON
        if is_in_data_section:
            if line.startswith('{') or line.startswith('[') or \
               '"title":' in line or '"link":' in line:
                collected_json += line + '\n'
            elif 'The task' in line:
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω—ã—Ö
                is_in_data_section = False
                formatted_text += data_section + '\n' + line
            continue
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        if 'üîó' in line:
            formatted_text += f"–ü–µ—Ä–µ—à–µ–ª –Ω–∞ —Å–∞–π—Ç: {line.split('üîó')[1].strip()}\n"
        elif 'üñ±Ô∏è' in line:
            formatted_text += f"–ù–∞–∂–∞–ª: {line.split('üñ±Ô∏è')[1].strip()}\n"
        elif 'üîç' in line:
            formatted_text += f"{line.split('üîç')[1].strip()}\n"
        elif '‚å®Ô∏è' in line:
            formatted_text += f"–í–≤–µ–ª: {line.split('‚å®Ô∏è')[1].strip()}\n"
        elif 'üïí' in line:
            formatted_text += f"–û–∂–∏–¥–∞–Ω–∏–µ: {line.split('üïí')[1].strip()}\n"
        elif not any(x in line for x in ['üìÑ', '```', 'Extracted from page']) and \
             not line.startswith('}') and not line.startswith(']'):
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–µ JSON –∏ –Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
            formatted_text += f"{line}\n"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π JSON
    if collected_json:
        try:
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            start_bracket = collected_json.find('[')
            end_bracket = collected_json.rfind(']')
            
            if start_bracket != -1 and end_bracket != -1:
                articles_json = collected_json[start_bracket:end_bracket + 1]
                articles = json.loads(articles_json)
                data_section += format_articles_simple(articles)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                start_brace = collected_json.find('{')
                end_brace = collected_json.rfind('}')
                
                if start_brace != -1 and end_brace != -1:
                    data_json = collected_json[start_brace:end_brace + 1]
                    data = json.loads(data_json)
                    
                    if 'articles' in data:
                        data_section += format_articles_list(data['articles'])
                    elif 'startups' in data:
                        data_section += format_startups(data['startups'])
                    else:
                        data_section += format_generic_object(data)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            data_section += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        if '–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:' in formatted_text:
            formatted_text = formatted_text.replace('–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', data_section)
        else:
            formatted_text += '\n' + data_section
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    if 'The task' in result and 'The task' not in formatted_text:
        task_end_index = result.rfind('The task')
        if task_end_index != -1:
            task_message = result[task_end_index:].split('\n')[0].strip()
            formatted_text += f"\n\n{task_message}"
    
    return formatted_text.strip()


def format_articles_simple(articles: List[Dict]) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    
    Args:
        articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
    """
    if not isinstance(articles, list) or not articles:
        return "–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    formatted_text = ""
    
    for index, article in enumerate(articles):
        formatted_text += f"{index + 1}. {article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        
        if link := article.get('link') or article.get('url'):
            formatted_text += f"   –°—Å—ã–ª–∫–∞: {link}\n"
        
        if date := article.get('date'):
            formatted_text += f"   –î–∞—Ç–∞: {date}\n"
        
        formatted_text += '\n'
    
    return formatted_text


def format_articles_list(articles: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
    
    Args:
        articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
    """
    if not isinstance(articles, list) or not articles:
        return "–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    formatted_text = ""
    
    for index, article in enumerate(articles):
        formatted_text += f"{index + 1}. {article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        
        if link := article.get('link') or article.get('url'):
            formatted_text += f"   –°—Å—ã–ª–∫–∞: {link}\n"
        
        if date := article.get('date'):
            formatted_text += f"   –î–∞—Ç–∞: {date}\n"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        if links := article.get('links'):
            if isinstance(links, list):
                formatted_text += f"   –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n"
                for link_index, link in enumerate(links):
                    formatted_text += f"     {link_index + 1}. {link}\n"
        
        formatted_text += '\n'
    
    return formatted_text


def format_articles(json_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å relevant_articles
    
    Args:
        json_data: –î–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—å—è–º–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
    """
    formatted_text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:\n\n"
    
    for index, article in enumerate(json_data['relevant_articles']):
        formatted_text += f"{index + 1}. {article.get('title', '')}\n"
        
        if date := article.get('date'):
            formatted_text += f"   –î–∞—Ç–∞: {date}\n"
        
        formatted_text += '\n'
    
    if summary := json_data.get('summary'):
        formatted_text += f"\n–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä: {summary}"
    
    return formatted_text


def format_startups(startups: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
    
    Args:
        startups: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
    """
    if not isinstance(startups, list) or not startups:
        return "–°—Ç–∞—Ä—Ç–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    formatted_text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã:\n\n"
    
    for index, startup in enumerate(startups):
        formatted_text += f"{index + 1}. {startup.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        
        if link := startup.get('url') or startup.get('link'):
            formatted_text += f"   –°—Å—ã–ª–∫–∞: {link}\n"
        
        formatted_text += '\n'
    
    return formatted_text


def format_generic_object(obj: Union[Dict, List, Any]) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ JSON –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    
    Args:
        obj: –û–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not isinstance(obj, (dict, list)) or (isinstance(obj, list) and not obj):
        return str(obj)
    
    if isinstance(obj, list):
        formatted_text = ""
        for index, item in enumerate(obj):
            formatted_text += f"{index + 1}. "
            
            if isinstance(item, dict):
                sub_items = []
                for key, value in item.items():
                    if key in ['raw_html', 'html']:
                        continue
                    
                    if isinstance(value, str):
                        sub_items.append(f"{key}: {value}")
                    else:
                        sub_items.append(f"{key}: {json.dumps(value, ensure_ascii=False)}")
                
                formatted_text += ", ".join(sub_items)
            else:
                formatted_text += str(item)
            
            formatted_text += '\n'
        
        return formatted_text
    
    # –î–ª—è —Å–ª–æ–≤–∞—Ä–µ–π
    result = []
    for key, value in obj.items():
        if key in ['raw_html', 'html']:
            continue
        
        if isinstance(value, str):
            result.append(f"{key}: {value}")
        elif isinstance(value, list):
            formatted_list = format_generic_object(value)
            result.append(f"{key}:\n{formatted_list}")
        elif isinstance(value, dict):
            formatted_dict = format_generic_object(value)
            result.append(f"{key}:\n{formatted_dict}")
        else:
            result.append(f"{key}: {json.dumps(value, ensure_ascii=False)}")
    
    return '\n\n'.join(result)


def clean_markdown(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç Markdown –∏ –¥—Ä—É–≥—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ä–∞–∑–º–µ—Ç–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    text = re.sub(r'```[a-z]*\n', '', text)
    text = re.sub(r'```\n?', '', text)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —Å–∫–æ–±–∫–∞–º–∏
    text = re.sub(r'^\s*\{', '{', text, flags=re.MULTILINE)
    text = re.sub(r'^\s*\}', '}', text, flags=re.MULTILINE)
    
    # –£–¥–∞–ª—è–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'\*(.*?)\*', r'\1', text)      # –ö—É—Ä—Å–∏–≤
    text = re.sub(r'#{1,6}\s+', '', text)         # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    text = re.sub(r'Extracted from page[^\n]*\n', '', text)
    text = re.sub(r'üìÑ[^\n]*\n', '', text)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    text = re.sub(r'\]\n\n+\]', ']]', text)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)
    
    return text 